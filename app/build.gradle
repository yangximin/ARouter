apply plugin: 'com.android.application'
//只需精确到最外层即可（ext）
def rootAndroidId = rootProject.ext.androidId
def support = rootProject.ext.dependencies
def appId = rootProject.ext.appId

print(name + "-isRelease:" + isRelease)
android {
    compileSdkVersion rootAndroidId.compileSdkVersion
    buildToolsVersion rootAndroidId.buildToolsVersion
    defaultConfig {
        applicationId appId.app
        minSdkVersion rootAndroidId.minSdkVersion
        targetSdkVersion rootAndroidId.targetSdkVersion
        versionCode rootAndroidId.versionCode
        versionName rootAndroidId.versionName
        multiDexEnabled false
        // 切记：必须写在defaultConfig节点下
        buildConfigField("boolean", "isRelease", String.valueOf(isRelease))
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName(), packageNameForAPT: packeageNameForAPT]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    implementation 'com.android.support:appcompat-v7:28.0.0'
//    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    support.each { k, v -> implementation v }
    implementation project(':baselib')
    implementation project(':arouter_annotation')
    annotationProcessor project(':arouter_compiler') // 注解处理器
    if (isRelease) {
        implementation project(':order')
        implementation project(':personal')
    }
}
